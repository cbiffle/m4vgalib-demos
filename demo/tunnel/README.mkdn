Old-skool tunnel effect.

This demonstrates:

 - Dividing down resolution to save on memory and computation time (in this
   case, pixels are handled in 2x2 groups).
 - Using half-precision floating point to store precomputed tables more
   cheaply.
 - Stupid constexpr tricks for generating lookup tables at compile time and
   putting them in ROM.
 - Rendering tricks handed down through the ages.


Notes
=====

This demo uses a bunch of tricks.

First: it uses a lookup table to avoid calling `atan2` or `sqrt` during
rendering.  This lookup table is generated by a `constexpr` routine in
`table.cc`, so it runs *entirely inside the compiler*.  The results are just
as if you had typed them in by hand, and can (and do!) go into ROM.

Second: the lookup table only describes one quarter of the screen, because
that's enough for `atan2`.  We can generate the rest of the screen using
basic trig identities.

Third: the lookup table is decimated, with each entry describing a 4x4
doubled-pixel area (so 8x8 monitor pixes).  This dramatically reduces the size
of the table.  We linearly interpolate between table entries to make up for the
missing data.  It's technically wrong, but it looks fine.

Fourth: the lookup table is further compacted by being stored in half-precision
floating point.

Fifth: we only actually draw the *top half* of the screen.  We use a special
rasterizer to mirror and reverse the top of the screen onto the bottom half
during scanout.  This makes two pages of 8-bit framebuffer just barely
possible.

All that processing is using about 60% of the available CPU.  Increasing the
`config::sub` parameter raises the interpolation block size to 8x8, reduces the
CPU usage to 33%, but making the tunnel in the distance appear slightly
square.  Tradeoffs.

Moving from 400x300 to 800x600 would be difficult; the framebuffers just barely
fit already.  It's tempting to consider generating the tunnel pixels during
rasterization, on the fly, but you'd need to do this for *every* scanline ---
whereas right now we only process every other.  Without a breakthrough in the
algorithms it seems computationally infeasible.
